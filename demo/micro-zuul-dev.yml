zuul:
  #添加host头信息，标识最初的服务端请求地址
  #add-host-header: true
  #默认添加  X-Forwarded-*头域
  #add-proxy-headers: true
  # 通配方式配置排除网关代理路径。所有符合ignored-patterns的请求路径都不被zuul网关代理。请求到这个表达式，也不需要做路由
  ignored-patterns: /**/local/**
  # 此方式相当于给所有新发现的服务默认排除zuul网关访问方式，只有配置了路由网关的服务才可以通过zuul网关访问
  # 通配方式配置排除列表。哪些服务是不需要路由的
  ignored-services: '*'
  #全局关闭重试
  retryable: false
  routes:
    blog:
      path: /blog/**   #拦截/blog开头的url
      url: http://localhost:8003/ #拦截到url转发到哪
    micro-web:
      # 使用路径方式匹配路由规则。
      # 参数key结构： zuul.routes.customName.path=xxx
      # 用于配置路径匹配规则。
      # 其中customName自定义。通常使用要调用的服务名称，方便后期管理
      # 可使用的通配符有： * ** ?
      # ? 单个字符
      # * 任意多个字符，不包含多级路径
      # ** 任意多个字符，包含多级路径
      path: /web/**
      #关闭该服务的重试
      retryable: false
      # http://localhost:6060/actuator/hystrix.stream
      #针对某个服务传输指定的headers信息 ，默认是过滤掉 Cookie,Set-Cookie,Authorization 这三个信息的
      #这里置空就是不要过滤掉这三个  要不要过滤敏感资源
      sensitive-headers: ''
      # 参数key结构： zuul.routes.customName.url=xxx
      # url用于配置符合path的请求路径路由到的服务地址。
      #zuul.routes.micro-order.url=http://localhost:8080/

      # key结构 ： zuul.routes.customName.serviceId=xxx
      # serviceId用于配置符合path的请求路径路由到的服务名称。
      serviceId: micro-web
    zuul-server:
      #Zuul拦截的url
      path: /local/**
      #拦截到url路由到哪里
      url: forward:/local
